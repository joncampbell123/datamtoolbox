
#include "common/Types.h"

// begin namespace
namespace MacromediaFlashSWF {
///////////////////////////////

// variable bit-length structure.
// minimum 5 bits
// maximum 5+32+32+32+32 = 133 bits, or 17 bytes
typedef struct Rect {
	unsigned char			Nbits;					// UB[5]
	unsigned long			Xmin;					// SB[Nbits]
	unsigned long			Xmax;					// SB[Nbits]
	unsigned long			Ymin;					// SB[Nbits]
	unsigned long			Ymax;					// SB[Nbits]
} Rect;

typedef struct FileHeader {
	unsigned char			version;
	unsigned long			FileLength;
	Rect					FrameSize;
	unsigned short int		FrameRate;		// 8.8 fixed point format
	unsigned short int		FrameCount;		// total number of frames in movie [1]
// generated by code
	unsigned long			FirstTagOffset;
} FileHeader;
// [1] my experience is that this number is not accurate for Flash movies with
//     synchronized sound and lots of frames at a frame rate > 30fps.

int ReadHeader(unsigned char *buf,int buflen,FileHeader *fh);
int ReadFileHeader(unsigned char *buf,int buflen,FileHeader *fh);

// helper class for reading bits and stuff like that
class BitsNBytes {
public:
	BitsNBytes();
	BitsNBytes(unsigned char *buffer,int len);
public:
	void Assign(unsigned char *buffer,int len);
	void Seek(unsigned char *ptr);
public:
	void ByteAlign();
	unsigned char UI8();
	unsigned short UI16();
	signed short SI16();
	unsigned long UI32();
	int oodata();
public:
	unsigned long UB(int N);
	unsigned long SB(int N);
public:
	unsigned char *begin,*next,*fence;
	unsigned char shift,shiftLeft;
};

// set of routines to read common SWF structures
int ReadRect(BitsNBytes *bb,Rect *r);

// SWF tag reading code
class TagReader {
public:
	TagReader(BitsNBytes* newbb);
public:
	int ReadTag();
public:
	// taken from tag itself
	unsigned long		Length;
	unsigned short		Code;
	// set if a long tag record was read
	unsigned char		IsLongTag;
	// generated from otherparams
	unsigned long		TagHeaderLength;	// tag record header length
	unsigned long		TotalLength;		// Tag + data
	// pointers for easy access
	unsigned char*		TagHeader;
	unsigned char*		TagData;
	unsigned char*		TagEnd;
public:
	BitsNBytes*			bb;
};

// enumerations for tag codes
class Tag {
public:
	enum {
		End =									0,
		ShowFrame =								1,
		DefineShape =							2,
		PlaceObject =							4,
		RemoveObject =							5,
		DefineBits =							6,
		JPEGTables =							8,
		SetBackgroundColor =					9,
		DefineSound =							14,
		SoundStreamHead =						18,
		SoundStreamBlock =						19,
		DefineBitsJPEG2 =						21,
		DefineShape2 =							22,
		Protect =								24,
		DefineShape3 =							32,
		DefineBitsJPEG3 =						35,
		DefineSprite =							39,
		SoundStreamHead2 =						45,
	};
};

// enumerations for DefineSound tags
class DefineSound_Format {
public:
	enum {
		Uncompressed =							0,
		ADPCM =									1,
// SWF 4 and later only:
		MP3 =									2,
		UncompressedLE =						3,
// SWF 6 and later only
		Nellymoser =							6,
	};
};

typedef struct DefineSound_Header {
	unsigned short int		SoundId;
	unsigned char			SoundFormat;
	int						SoundRate;				// translated from code to actual sample rate
	unsigned char			SoundSize;
	unsigned char			SoundType;
	unsigned long			SoundSampleCount;
} DefineSound_Header;

int ReadDefineSound_Header(BitsNBytes *bb,DefineSound_Header *h);

typedef struct SoundStreamHead_Header {
	unsigned char			Reserved0;
	int						PlaybackSoundRate;
	unsigned char			PlaybackSoundSize;
	unsigned char			PlaybackSoundType;
	unsigned char			StreamSoundCompression;
	int						StreamSoundRate;
	unsigned char			StreamSoundSize;
	unsigned char			StreamSoundType;
	unsigned int			StreamSampleCount;
	unsigned int			LatencySeek;
} SoundStreamHead_Header;

int ReadSoundStreamHead_Header(BitsNBytes *bb,SoundStreamHead_Header *h);

///////////////////////////////
};
// end namespace
